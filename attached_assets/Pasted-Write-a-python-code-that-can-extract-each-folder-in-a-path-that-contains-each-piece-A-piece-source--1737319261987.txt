Write a python code that can extract each folder in a path that contains each piece. A piece source code has several files and folder but under the folder called src the main file is the index.ts file which look like this as an example: 

import { PieceAuth, createPiece } from '@activepieces/pieces-framework';
import { fetchCryptoPairPrice } from './lib/actions/fetch-pair-price';

export const binance = createPiece({
  displayName: 'Binance',
  description: 'Fetch the price of a crypto pair from Binance',
  minimumSupportedRelease: '0.30.0',
  logoUrl: 'https://cdn.activepieces.com/pieces/binance.png',
  categories: [],
  auth: PieceAuth.None(),
  actions: [fetchCryptoPairPrice],
  authors: ["kishanprmr","khaledmashaly","abuaboud"],
  triggers: [],
});

Notice the actions filed that list various action this piece provide. For each action there could be files under a sub folder under src/lib/actions which has multiple files. In the files we can find an example like this:
import { httpClient, HttpMethod } from '@activepieces/pieces-common';
import { createAction, Property } from '@activepieces/pieces-framework';

export const fetchCryptoPairPrice = createAction({
  name: 'fetch_crypto_pair_price',
  displayName: 'Fetch Pair Price',
  description: 'Fetch the current price of a pair (e.g. BTC/USDT)',
  props: {
    first_coin: Property.ShortText({
      displayName: 'First Coin Symbol',
      description:
        "The currency to fetch the price for (e.g. 'BTC' in 'BTC/USDT')",
      required: true,
    }),
    second_coin: Property.ShortText({
      displayName: 'Second Coin Symbol',
      description:
        "The currency to fetch the price in (e.g. 'USDT' in 'BTC/USDT')",
      required: true,
    }),
  },
  async run(context) {
    const { first_coin, second_coin } = context.propsValue;
    if (first_coin && second_coin)
      return await fetchCryptoPairPriceImpl(${first_coin}${second_coin});
    throw Error('Missing parameter(s)');
  },
});

async function fetchCryptoPairPriceImpl(symbol: string): Promise<number> {
  const formattedSymbol = symbol
    .replace('/', '')
    .replace(' ', '')
    .toUpperCase();

  const url = https://api.binance.com/api/v3/ticker/price?symbol=${formattedSymbol};

  try {
    const response = await httpClient.sendRequest({
      method: HttpMethod.GET,
      url,
    });
    const data = await response.body;
    return Number(data['price']);
  } catch (error) {
    console.error(Error fetching price for symbol ${symbol}:, error);
    throw error;
  }
}

If this action is used as a step then this represent the various fields that should be added in the step in the json that we were creating. Now the idea is to extract 

The python code should create a txt file that will contain the description about each piece represented in the directory path and then action it contains with the parameters that we need to pass for each action. attached is how the directory structure looks like. 
